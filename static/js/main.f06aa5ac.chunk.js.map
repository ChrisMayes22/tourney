{"version":3,"sources":["containers/UploadPage/UploadPage.css","containers/FinalsPage/FinalsPage.css","containers/Winner/Winner.css","containers/EliminationPage/EliminationPage.css","containers/RatingRow/RatingRow.css","containers/VotingPage/VotingPage.css","containers/Home/Home.css","components/CharacterRedirect/CharacterRedirect.css","components/Character/Character.css","components/SubmitButton/SubmitButton.css","components/RatingButton/RatingButton.css","App.css","components/SubmitButton/SubmitButton.js","constants/actions.js","containers/Home/Home.js","constants/urls.js","components/CharacterRedirect/CharacterRedirect.js","components/RatingButton/RatingButton.js","containers/RatingRow/RatingRow.js","components/Character/Character.js","containers/VotingPage/VotingPage.js","containers/UploadPage/UploadPage.js","containers/EliminationPage/EliminationPage.js","containers/FinalsPage/FinalsPage.js","containers/Winner/Winner.js","components/ComponentNotFound/ComponentNotFound.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","flexContainer__col","inputContent","grid","imageHeader","refImg","modalBackground","modal","modalHeader","modalFlexContainer","modalImage","imageOne","imageTwo","mainImg","otherLosersHeader","eliminationHeader","flexContainer__row3Players","flexContainer__row4Players","awful","poor","active","average","good","excellent","grid__3Players","grid__4Players","competitorImage","background","ui","characterPortrait","submit","button__rating","App","submitButton","props","react_default","a","createElement","className","classes","onClick","clicked","id","children","INITIALIZE_CHARACTER","REMOVE_CHARACTER","REMOVE_LOWEST_SCORE","RATE_CHARACTER","SUBMIT_CHARACTER_RATINGS","SET_PLAYERS","RESET_FOR_FINALS","CHOOSE_WINNER","removeLowestScore","type","Home","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","players","onChange","event","onSetPlayers","Number","target","Link","to","SubmitButton_SubmitButton","Component","connect","state","dispatch","num","number","setPlayers","characterRedirect","ratingButton","quality","chosen","join","RatingRow","_getPrototypeOf2","_len","length","args","Array","_key","call","concat","qualityArray","points","ratingChoiceHandler","JSON","parse","stringify","forEach","el","i","indexOf","setState","ratingRowManager","rowId","character","onRate","_this2","map","isChosen","toConsumableArray","RatingButton_RatingButton","payload","rateCharacter","Character","arr","fill","_","index","src","imageUrl","alt","finals","characters","containers_RatingRow_RatingRow","VotingPage","playersArray","filter","char","hadTurn","Fragment","components_Character_Character","onSubmitRatings","submitCharacterRatings","UploadPage","modalDisplayToggle","imageUrlHandler","modalDisplay","findIndex","modalDisplayHandler","toggled","onEliminate","default","onUpload","String","Math","floor","random","imageContainer","onRemove","image","initializeCharacter","console","log","removeCharacter","EliminationPage","mainImageContainer","isEliminated","check","reduce","accumulator","currentValue","whenEliminated","FinalsPage","toggleModalHandler","displayToggle","startVotingHandler","onClearModal","submitWinnerHandler","player","onChooseWinner","chooseWinner","Winner","componentNotFound","Switch","Route","path","exact","component","CharacterRedirect","Boolean","window","location","hostname","match","initialState","subCharAtIndex","arrayCopy","modChar","store","createStore","undefined","action","actionTypes","objectSpread","roundRatings","rowOne","rowTwo","rowThree","rowFour","copy","currentChars","targetCharacter","ratings","keys","row","currentRow","chars","pointTotal","sum","charArray","payloadArray","createReplacementCharsArray","lowestScore","lowestScoreCopy","charsCopy","charsOfState","stateCharsCopy","loser","find","newChars","ReactDOM","render","es","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f06aa5ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer__col\":\"UploadPage__flexContainer__col__1887j\",\"inputContent\":\"UploadPage__inputContent__3cA_o\",\"grid\":\"UploadPage__grid__28Wk3\",\"imageHeader\":\"UploadPage__imageHeader__2PeuV\",\"refImg\":\"UploadPage__refImg__3t5Mw\",\"modalBackground\":\"UploadPage__modalBackground__ANjFv\",\"modal\":\"UploadPage__modal__2sQkM\",\"modalHeader\":\"UploadPage__modalHeader__10FMh\",\"modalFlexContainer\":\"UploadPage__modalFlexContainer__2-Qsi\",\"modalImage\":\"UploadPage__modalImage__1ifD7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"FinalsPage__grid__2ooKL\",\"imageOne\":\"FinalsPage__imageOne__3yTDw\",\"imageTwo\":\"FinalsPage__imageTwo__2oN6S\",\"modalBackground\":\"FinalsPage__modalBackground__1I_wY\",\"modal\":\"FinalsPage__modal__3meKE\",\"modalFlexContainer\":\"FinalsPage__modalFlexContainer__2nHuW\",\"modalImage\":\"FinalsPage__modalImage__2HqLS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer__col\":\"Winner__flexContainer__col__2rtbC\",\"grid\":\"Winner__grid__lm1jt\",\"mainImg\":\"Winner__mainImg__2Zj36\",\"refImg\":\"Winner__refImg__u_jE5\",\"otherLosersHeader\":\"Winner__otherLosersHeader__1wIsC\",\"eliminationHeader\":\"Winner__eliminationHeader__2-6EG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer__col\":\"EliminationPage__flexContainer__col__3pONk\",\"grid\":\"EliminationPage__grid__2dnIK\",\"refImg\":\"EliminationPage__refImg__263Qy\",\"otherLosersHeader\":\"EliminationPage__otherLosersHeader__34Evh\",\"eliminationHeader\":\"EliminationPage__eliminationHeader__2k3ol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer__row3Players\":\"RatingRow__flexContainer__row3Players__29JB7\",\"flexContainer__row4Players\":\"RatingRow__flexContainer__row4Players__2suAi\",\"awful\":\"RatingRow__awful__1P_Ox\",\"poor\":\"RatingRow__poor__260b5\",\"active\":\"RatingRow__active__37NbA\",\"average\":\"RatingRow__average__1LjqB\",\"good\":\"RatingRow__good__cblVk\",\"excellent\":\"RatingRow__excellent__3ll_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid__3Players\":\"VotingPage__grid__3Players__1bGv9\",\"grid__4Players\":\"VotingPage__grid__4Players__YjtD1\",\"competitorImage\":\"VotingPage__competitorImage__3VSN4\",\"modalBackground\":\"VotingPage__modalBackground__1ZdTr\",\"modal\":\"VotingPage__modal__x4Spg\",\"modalFlexContainer\":\"VotingPage__modalFlexContainer__3et20\",\"modalImage\":\"VotingPage__modalImage__1X2As\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Home__background__3347v\",\"ui\":\"Home__ui__1AZPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"CharacterRedirect__background__1Zvf8\",\"ui\":\"CharacterRedirect__ui__1tuqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer__col\":\"Character__flexContainer__col__7iRqV\",\"characterPortrait\":\"Character__characterPortrait__3HYvk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submit\":\"SubmitButton__submit__L2dk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button__rating\":\"RatingButton__button__rating__1CqGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3Ge-C\"};","import React from 'react';\r\nimport classes from './SubmitButton.css';\r\n\r\nconst submitButton = (props) => {\r\n    return(\r\n        <button \r\n            className={classes.submit}\r\n            onClick={props.clicked}\r\n            id={props.id}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default submitButton;","export const INITIALIZE_CHARACTER = 'INITIALIZE_CHARACTER';\r\nexport const REMOVE_CHARACTER = 'REMOVE_CHARACTER';\r\nexport const REMOVE_LOWEST_SCORE = 'REMOVE_LOWEST_SCORE';\r\nexport const RATE_CHARACTER = 'RATE_CHARACTER';\r\nexport const SUBMIT_CHARACTER_RATINGS = 'SUBMIT_CHARACTER_RATINGS';\r\nexport const SET_PLAYERS = 'SET_PLAYERS';\r\nexport const RESET_FOR_FINALS = 'RESET_FOR_FINALS';\r\nexport const CHOOSE_WINNER = 'CHOOSE_WINNER';\r\n\r\nexport const initializeCharacter = function(imageUrl, id){\r\n    return {type: INITIALIZE_CHARACTER, \r\n        payload: {image: imageUrl, id}}\r\n}\r\nexport const removeCharacter = function(id){\r\n    console.log('Remove Character Dispatched')\r\n    console.log(REMOVE_CHARACTER)\r\n    return {type: REMOVE_CHARACTER, id}\r\n}\r\nexport const removeLowestScore = function(){\r\n    return {type: REMOVE_LOWEST_SCORE};\r\n}\r\nexport const rateCharacter = function(points, rowId, character){\r\n    return {type: RATE_CHARACTER, payload:{\r\n        points, rowId, character}}\r\n}\r\nexport const submitCharacterRatings = function(playersArray){\r\n    return {type: SUBMIT_CHARACTER_RATINGS, payload:{\r\n        players: playersArray\r\n    }};\r\n};\r\nexport const setPlayers = function(num){\r\n    return {type: SET_PLAYERS, number: num}\r\n};\r\nexport const resetForFinals = function(){\r\n    return {type: RESET_FOR_FINALS}\r\n}\r\nexport const chooseWinner = function(character){\r\n    return {type: CHOOSE_WINNER, character}\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport classes from './Home.css';\r\nimport SubmitButton from '../../components/SubmitButton/SubmitButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'; \r\nimport { setPlayers } from '../../constants/actions';\r\nimport * as urls from '../../constants/urls';\r\n\r\nexport class Home extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className={classes.background}>\r\n                <nav className={classes.ui}>\r\n                    <h3>How many judges are joining us...?</h3>\r\n                    <input \r\n                        type=\"number\"\r\n                        value={this.props.players}\r\n                        onChange={(event) => this.props.onSetPlayers(Number(event.target.value))}></input>\r\n                        {(this.props.players === 3 || this.props.players === 4)  ? \r\n                            <Link to={urls.UPLOAD_PAGE} id='uploadLink'>\r\n                                <SubmitButton children={\"Let's begin!\"} id=\"beginButton\"/>\r\n                            </Link> : \r\n                            <h3>This game is designed for THREE or FOUR players</h3>}\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        players: state.players\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetPlayers: (num) => dispatch(setPlayers(num))\r\n    }\r\n }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","export const VOTING_PAGE = '/voting';\r\nexport const ELIMINATION_PAGE = '/elimination';\r\nexport const NOT_ENOUGH_CHARACTERS = '/not-enough-characters';\r\nexport const FINALS_PAGE = '/finals';\r\nexport const UPLOAD_PAGE = '/upload';\r\nexport const WINNER_PAGE = '/winner';\r\nexport const HOME = '/';","import React from 'react';\r\nimport classes from './CharacterRedirect.css';\r\nimport SubmitButton from '../SubmitButton/SubmitButton';\r\nimport * as urls from '../../constants/urls';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst characterRedirect = () => {\r\n    return(\r\n        <div className={classes.background}>\r\n            <nav className={classes.ui}>\r\n                <h3>Each players should upload exactly one character per round.</h3>\r\n                <Link to={urls.UPLOAD_PAGE}>\r\n                    <SubmitButton children={\"OK\"}/>\r\n                </Link>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default characterRedirect;","import React from 'react';\r\nimport classes from './RatingButton.css';\r\n\r\nconst ratingButton = (props) => {\r\n    return(\r\n        <button \r\n            className={[classes.button__rating, props.quality, props.chosen].join(' ')}\r\n            onClick={props.clicked}>\r\n                {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ratingButton;","import React, { Component } from 'react';\r\nimport RatingButton from '../../components/RatingButton/RatingButton';\r\nimport classes from './RatingRow.css';\r\nimport { connect } from 'react-redux';\r\nimport { rateCharacter } from '../../constants/actions';\r\n\r\nexport class RatingRow extends Component {\r\n    state = {\r\n        qualityArray: [ {quality: 'awful', active: false, points: 1}, \r\n                        {quality: 'poor', active: false, points: 2}, \r\n                        {quality: 'average', active: false, points: 3}, \r\n                        {quality: 'good', active: false, points: 4}, \r\n                        {quality: 'excellent', active: false, points: 5}]\r\n    }\r\n\r\n    ratingChoiceHandler = (id) =>{\r\n        const qualityArray = JSON.parse(JSON.stringify(this.state.qualityArray));\r\n        \r\n        qualityArray.forEach(el => {\r\n            const i = qualityArray.indexOf(el);\r\n            if(i <= id){\r\n                el.active = true;\r\n            } else {\r\n                el.active = false;\r\n            }\r\n        })\r\n        this.setState({\r\n            qualityArray: qualityArray\r\n        })\r\n    }\r\n\r\n    ratingRowManager = (id, points, rowId, character) =>{\r\n        this.ratingChoiceHandler(id);\r\n        this.props.onRate(points, rowId, character);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id={this.props.id}\r\n                className={this.props.players === 3 ? classes.flexContainer__row3Players : classes.flexContainer__row4Players}>\r\n                    {this.state.qualityArray.map((el, i) => {\r\n                        const qualityArray = [...this.state.qualityArray]\r\n                        let isChosen = '';\r\n                        if(qualityArray[i].active){\r\n                            isChosen = 'active';\r\n                        }\r\n                        return(\r\n                            <RatingButton children={i + 1}\r\n                                quality={classes[el.quality]}\r\n                                chosen={classes[isChosen]}\r\n                                key={i}\r\n                                clicked={() => this.ratingRowManager(i, el.points, this.props.rowId, this.props.character)}\r\n                                />\r\n                        );\r\n                    })}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        players: state.players\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onRate: (points, rowId, character) => dispatch(rateCharacter(points, rowId, character))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RatingRow);","import React from 'react';\r\nimport classes from './Character.css';\r\nimport RatingRow from '../../containers/RatingRow/RatingRow';\r\nimport SubmitButton from '../SubmitButton/SubmitButton';\r\nimport * as urls from '../../constants/urls';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Character = (props) => {\r\n\r\n    const arr = new Array(props.players).fill(null).map((_, index) => index);\r\n\r\n    return(\r\n            <section className={classes.flexContainer__col}>\r\n                <img \r\n                    src={props.character.imageUrl} \r\n                    className={classes.characterPortrait}\r\n                    alt=\"One of the images chosen for competition\"\r\n                />\r\n                {props.finals ? <Link \r\n                                    to= {props.characters.length === 2 ? urls.WINNER_PAGE : urls.FINALS_PAGE}\r\n                                    onClick={props.clicked}>\r\n                                    <SubmitButton>\r\n                                        Winner!\r\n                                    </SubmitButton>\r\n                                </Link> : arr.map((number) => {\r\n                    return<RatingRow \r\n                            character={props.character}\r\n                            rowId={`${props.character.id}-row-${number+1}`}\r\n                            key={`key:${props.character.id}-row-${number+1}`}\r\n                            id={`id:${props.character.id}-row-${number+1}`}/>\r\n                })}           \r\n            </section> \r\n    );\r\n}\r\n\r\nexport default Character;","import React, {Component } from 'react';\r\nimport Character from '../../components/Character/Character';\r\nimport classes from './VotingPage.css';\r\nimport SubmitButton from '../../components/SubmitButton/SubmitButton';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { submitCharacterRatings } from '../../constants/actions';\r\nimport * as urls from '../../constants/urls';\r\n\r\nexport class VotingPage extends Component {\r\n\r\n    playersArray= this.props.characters.filter(char => !char.hadTurn)\r\n\r\n\r\n    render () {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <main className={this.props.players === 3 ? classes.grid__3Players : classes.grid__4Players}>\r\n                    {this.props.characters.filter(char => !char.hadTurn).map(char => {\r\n                            return (\r\n                                <section className={classes.competitorImage} key={`${char.id}-section`}>\r\n                                    <Character players={this.props.players} character={char}/>\r\n                                </section>\r\n                            );\r\n                    })}\r\n                </main>\r\n                <footer>\r\n                    <Link \r\n                        onClick={() => this.props.onSubmitRatings(this.playersArray)}\r\n                        to={urls.UPLOAD_PAGE}>\r\n                            <SubmitButton children={\"Submit\"}/>\r\n                    </Link>\r\n                </footer>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n    \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        characters: state.characters,\r\n        players: state.players\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmitRatings: (playersArray) => dispatch(submitCharacterRatings(playersArray))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VotingPage);","import React, { Component } from 'react';\r\nimport classes from './UploadPage.css';\r\nimport SubmitButton from '../../components/SubmitButton/SubmitButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {initializeCharacter, removeCharacter, removeLowestScore} from '../../constants/actions'\r\nimport * as urls from '../../constants/urls';\r\n\r\nexport class UploadPage extends Component {\r\n\r\n    state = {\r\n        imageUrl: '',\r\n        modalDisplayToggle: true\r\n    }\r\n\r\n    imageUrlHandler = (event) => {\r\n        const imageUrl = event.target.value;\r\n        this.setState({\r\n            imageUrl: imageUrl\r\n        })\r\n    }\r\n\r\n    modalDisplay = (this.props.characters.findIndex(character => character.hadTurn)+1);\r\n\r\n    modalDisplayHandler = () => {\r\n        const toggled = !this.state.modalDisplayToggle;\r\n        this.setState({\r\n            modalDisplayToggle: toggled\r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        return(\r\n            <React.Fragment>\r\n                {(this.modalDisplay * this.state.modalDisplayToggle)? <div className={classes.modalBackground} id='modal'>\r\n                        <aside className={classes.modal} >\r\n                        <h5 className= {classes.modalHeader}>\r\n                            DO YOU WANT TO ADD ANOTHER ROUND OF CHARACTERS... <br/>\r\n                            ...OR MOVE ON TO THE SORTING?\r\n                        </h5>\r\n                            <br/>\r\n                            <SubmitButton \r\n                                children={'Add another!'}\r\n                                clicked={this.modalDisplayHandler}/>\r\n                            <Link to={urls.ELIMINATION_PAGE} onClick={this.props.onEliminate}>\r\n                                <SubmitButton children={'Move on to the finals.'}/>\r\n                            </Link>\r\n                        </aside>\r\n                    </div> : null}\r\n\r\n                <div className={classes.flexContainer__col}>\r\n                    <section className={classes.inputContent}>\r\n                        <h3>{`Upload ${this.props.players} images that will be competing, (using a url)...`}<br/>\r\n                        ...Or begin the game.</h3>\r\n                        <input \r\n                            type=\"text\"\r\n                            onChange={this.imageUrlHandler}\r\n                            default=\"image-url\">\r\n                        </input>\r\n                            <SubmitButton \r\n                                children={\"Upload\"}\r\n                                id={\"uploadButton\"}\r\n                                clicked={() => this.props.onUpload(this.state.imageUrl,\r\n                                                        `url=${String(this.state.imageUrl)}${Math.floor(Math.random()*1000000)}`)}\r\n                            />\r\n                        <Link \r\n                            to={this.props.characters.filter(el => !el.hadTurn).length === this.props.players ? urls.VOTING_PAGE : urls.NOT_ENOUGH_CHARACTERS} \r\n                            id=\"beginGameButton\">\r\n                                <SubmitButton children={\"Begin Game\"}/>\r\n                        </Link>\r\n                    </section>\r\n                    <section className={classes.grid} id='grid'>\r\n                        <header className={classes.imageHeader}>\r\n                            <h1>Uploaded Images</h1>\r\n                            <h5>Click Image to Remove</h5>\r\n                        </header>\r\n                        {this.props.characters.map(el =>{\r\n                            return (\r\n                                <div className={classes.imageContainer} key={el.id}>\r\n                                    <img \r\n                                        className={classes.refImg} \r\n                                        src={el.imageUrl} \r\n                                        onClick={() => this.props.onRemove(el.id)}\r\n                                        alt={\"One of the competing items\"}/>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </section>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onUpload: (imageUrl, id) => dispatch(initializeCharacter(imageUrl, id)),\r\n        onRemove: (id) => dispatch(removeCharacter(id)),\r\n        onEliminate: () => dispatch(removeLowestScore())\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        characters: state.characters,\r\n        players: state.players\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadPage);","import React, { Component } from 'react';\r\nimport classes from './EliminationPage.css';\r\nimport SubmitButton from '../../components/SubmitButton/SubmitButton';\r\nimport {removeLowestScore } from '../../constants/actions';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport * as urls from '../../constants/urls';\r\n\r\nexport class EliminationPage extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <main className={classes.flexContainer__col}>\r\n                    <h1 className={classes.eliminationHeader}>ELIMINATED!!</h1>\r\n                    <div className={classes.mainImageContainer}>\r\n                        {[this.props.characters.filter(char => char.isEliminated.check)\r\n                            .reduce(function(accumulator, currentValue){\r\n                                if(accumulator.isEliminated.whenEliminated < currentValue.isEliminated.whenEliminated) {\r\n                                    return currentValue;\r\n                                } else {\r\n                                    return accumulator;\r\n                                }\r\n                            })].map(function(char){ \r\n                                return(<img src={char.imageUrl} id={char.id} key={`${char.id}-key`} alt=\"The most recent losing competitor\"/>);\r\n                            })}\r\n                    </div>\r\n                    <Link  to={this.props.characters.filter(char => !char.isEliminated.check).length < 7 ? urls.FINALS_PAGE : urls.ELIMINATION_PAGE}\r\n                        onClick={this.props.characters.filter(char => !char.isEliminated.check).length > 6 ? this.props.onEliminate : null}>\r\n                        <SubmitButton \r\n                            id={'EliminationPage__continueButton'}\r\n                            children={this.props.characters.filter(char => !char.isEliminated.check).length < 7 ? \r\n                                'On to the finals!' : 'Eliminate another!'}/>\r\n                    </Link>\r\n                </main>\r\n                <section className={classes.grid}>\r\n                    <h5 className={classes.otherLosersHeader}>~ The Other Losers ~</h5>\r\n                    {this.props.characters.filter(char => char.isEliminated.check).length > 1? this.props.characters.filter(char => char.isEliminated.check).filter(\r\n                        char => char.id !== (this.props.characters.reduce(function(accumulator, currentValue){\r\n                            if(accumulator.isEliminated.whenEliminated < currentValue.isEliminated.whenEliminated) {\r\n                                return currentValue;\r\n                            } else {\r\n                                return accumulator;\r\n                            }\r\n                        })).id).map(function(char){\r\n                                return (<img src={char.imageUrl} key={char.id} className={classes.refImg} alt=\"a losing competitor\"/>)\r\n                        }) : null}\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onEliminate: () => dispatch(removeLowestScore())\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        characters: state.characters\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EliminationPage);","import React, {Component } from 'react';\r\nimport Character from '../../components/Character/Character';\r\nimport classes from './FinalsPage.css';\r\nimport SubmitButton from '../../components/SubmitButton/SubmitButton';\r\nimport { connect } from 'react-redux';\r\nimport { resetForFinals, removeLowestScore, chooseWinner } from '../../constants/actions';\r\n\r\nexport class FinalsPage extends Component {\r\n\r\n    state = {\r\n        modal: true,\r\n    }\r\n\r\n    toggleModalHandler = () =>{\r\n        const displayToggle = !this.state.modal;\r\n        this.setState({\r\n            modal: displayToggle\r\n        })\r\n    }\r\n\r\n    startVotingHandler = () => {\r\n        this.toggleModalHandler();\r\n        this.props.onClearModal();\r\n    }\r\n\r\n    submitWinnerHandler = (player) => {\r\n        this.props.onChooseWinner(player);\r\n        this.toggleModalHandler();\r\n    }\r\n\r\n    render () {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                {this.state.modal ? <div className={classes.modalBackground}>\r\n                    <aside className={classes.modal}>\r\n                        <h1>Only these few remain!</h1>\r\n                        <h5>From now on, matches will be single elimination.</h5>\r\n                        <div className={classes.modalFlexContainer}>\r\n                            {this.props.characters.filter(el => !el.isEliminated.check).map(char => {\r\n                                return <img \r\n                                    src={char.imageUrl} \r\n                                    key={`charImage:${char.id}`} \r\n                                    alt={'competitor'} \r\n                                    className={classes.modalImage}/>\r\n                            })}\r\n                        </div>\r\n                        <h5>Are you ready to begin?</h5>\r\n                        <br/>\r\n                        <SubmitButton \r\n                            children={'Yes!'}\r\n                            clicked={() => this.startVotingHandler()}/>      \r\n                    </aside>\r\n                </div> : null}\r\n                <main className={classes.grid}>\r\n                    <section className={classes.imageOne}>\r\n                        <Character \r\n                            players ={this.props.players} \r\n                            finals={true}\r\n                            character={this.props.characters.filter(el => !el.isEliminated.check)[0]} \r\n                            characters={this.props.characters.filter(el => !el.isEliminated.check)} \r\n                            clicked={() => this.submitWinnerHandler(this.props.characters.filter(el => !el.isEliminated.check)[1])}\r\n                            id={'first-char'}/>\r\n                    </section>\r\n                    <section className={classes.imageTwo}>\r\n                        <Character \r\n                            players={this.props.players} \r\n                            finals={true}\r\n                            character={this.props.characters.filter(el => !el.isEliminated.check)[1]}\r\n                            characters={this.props.characters.filter(el => !el.isEliminated.check)} \r\n                            clicked={() => this.submitWinnerHandler(this.props.characters.filter(el => !el.isEliminated.check)[0])}\r\n                            id={'second-char'}/>\r\n                    </section>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        characters: state.characters,\r\n        players: state.players\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onChooseWinner: (character) => dispatch(chooseWinner(character)),\r\n        onClearModal: () => dispatch(resetForFinals()),\r\n        onEliminate: () => dispatch(removeLowestScore())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FinalsPage);","import React, { Component } from 'react';\r\nimport classes from './Winner.css';\r\nimport { connect } from 'react-redux';\r\n\r\nexport class Winner extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <main className={classes.flexContainer__col}>\r\n                    <h1 className={classes.eliminationHeader}>WINNER!!</h1>\r\n                    <div className={classes.mainImageContainer}>\r\n                        {this.props.characters.filter(char => !char.isEliminated.check).map(function(char){\r\n                            return(<img src={char.imageUrl} key={char.id} className={classes.mainImg} alt=\"the winner!\"/>)\r\n                        })}\r\n                    </div>\r\n                </main>\r\n                <section className={classes.grid}>\r\n                    <h5 className={classes.otherLosersHeader}>~ The Losers ~</h5>\r\n                    {this.props.characters.filter(char => char.isEliminated.check).map(char => \r\n                        <img src={char.imageUrl} key={char.id} className={classes.refImg} alt=\"a losing competitor\"/>)}\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        characters: state.characters\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Winner);","import React from 'react';\r\n\r\nconst componentNotFound = () => <h1>404: Page Not Found</h1>\r\n\r\nexport default componentNotFound;","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Home from './containers/Home/Home';\r\nimport CharacterRedirect from './components/CharacterRedirect/CharacterRedirect';\r\nimport VotingPage from './containers/VotingPage/VotingPage';\r\nimport UploadPage from './containers/UploadPage/UploadPage';\r\nimport EliminationPage from './containers/EliminationPage/EliminationPage';\r\nimport FinalsPage from './containers/FinalsPage/FinalsPage';\r\nimport Winner from './containers/Winner/Winner';\r\nimport componentNotFound from './components/ComponentNotFound/ComponentNotFound';\r\nimport * as urls from './constants/urls'\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <Switch>\r\n        <Route path={urls.VOTING_PAGE} exact component={VotingPage}/>\r\n        <Route path ={urls.ELIMINATION_PAGE} exact component={EliminationPage}/>\r\n        <Route path={urls.NOT_ENOUGH_CHARACTERS} exact component={CharacterRedirect}/>\r\n        <Route path={urls.FINALS_PAGE} exact component={(FinalsPage)}/>\r\n        <Route path={urls.UPLOAD_PAGE} exact component={UploadPage}/>\r\n        <Route path={urls.WINNER_PAGE} exact component={Winner}/>\r\n        <Route path={urls.HOME} exact component={Home}/>\r\n        <Route component={componentNotFound}/>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from '../constants/actions';\r\n\r\nconst initialState = {\r\n    characters: [],\r\n    players: 3\r\n}\r\n\r\nexport function subCharAtIndex(arrayCopy, modChar){\r\n    const index = arrayCopy.findIndex(character => character.id === modChar.id);\r\n    arrayCopy[index] = modChar\r\n    return arrayCopy;\r\n}\r\n\r\n\r\nexport function rootReducer(state=initialState, action) {\r\n    function createReplacementCharsArray(charArray, payloadArray){\r\n        const characters = [...state.characters];\r\n        payloadArray.forEach(payload => {\r\n            const character = charArray.filter(char => char.id === payload.id)[0];\r\n            const index = [...state.characters].findIndex(char => char.id === payload.id);\r\n            characters[index] = character;\r\n        })\r\n\r\n        return characters;\r\n    }\r\n\r\n    switch(action.type) {\r\n        case actionTypes.SET_PLAYERS:\r\n        return{\r\n            ...state,\r\n            players: action.number\r\n        }\r\n        case actionTypes.INITIALIZE_CHARACTER:\r\n        //dispatch({type: actionTypes.INITIALIZE_CHARACTER, payload: {image: imageUrl, id: id}})\r\n            return {\r\n                ...state,\r\n                characters: [...state.characters, {\r\n                    imageUrl: action.payload.image,\r\n                    roundRatings: {\r\n                        rowOne: {rowId: `${action.payload.id}-row-1`, points: 1},\r\n                        rowTwo: {rowId: `${action.payload.id}-row-2`, points: 1},\r\n                        rowThree: {rowId: `${action.payload.id}-row-3`, points: 1},\r\n                        rowFour: {rowId: `${action.payload.id}-row-4`, points: 1}\r\n                    },\r\n                    points: 0,\r\n                    hadTurn: false,\r\n                    isEliminated: {check: false, whenEliminated: null},\r\n                    id: action.payload.id\r\n                }]\r\n            }\r\n\r\n        case actionTypes.REMOVE_CHARACTER:\r\n        //dispatch({type: actionTypes.REMOVE_CHARACTER, id: id})\r\n            const copy = [...state.characters].filter(char => char.id !== action.id);\r\n            return{\r\n                ...state,\r\n                characters: copy\r\n            };\r\n\r\n        case actionTypes.RATE_CHARACTER:\r\n        //dispatch({type: actionTypes.RATE_CHARACTER, payload: {points: points, rowId: rowId, character: character}})\r\n\r\n            let currentChars = [...state.characters]\r\n            let targetCharacter = currentChars.filter(char => char.id === action.payload.character.id)[0];\r\n            const ratings = {...targetCharacter.roundRatings}\r\n            const ratingsKeys = Object.keys(ratings);\r\n\r\n            ratingsKeys.forEach(function(row) {\r\n                const currentRow = {...ratings[row]};\r\n                if(ratings[row].rowId === action.payload.rowId){\r\n                    currentRow.points = action.payload.points;\r\n                }\r\n                targetCharacter.roundRatings[row] = currentRow;\r\n            })\r\n\r\n            currentChars = subCharAtIndex([...currentChars], targetCharacter);\r\n\r\n            return{\r\n                ...state,\r\n                characters: currentChars\r\n            }\r\n\r\n        case actionTypes.SUBMIT_CHARACTER_RATINGS:\r\n        // dispatch({type: actionTypes.SUBMIT_CHARACTER_RATINGS, payload:{players: playersArray}});\r\n            let chars = [...state.characters].filter(char => !char.hadTurn);\r\n\r\n\r\n            chars.forEach(char => {\r\n                let pointTotal = [];\r\n                const ratings = {...char.roundRatings};\r\n                const ratingsKeys = Object.keys(ratings);\r\n                ratingsKeys.forEach(function(row) {\r\n                    const currentRow = {...ratings[row]};\r\n                    pointTotal = pointTotal.concat(currentRow.points);\r\n                })\r\n                const sum = pointTotal.reduce(function(accumulator, currentValue){\r\n                    return accumulator + currentValue;\r\n                }, 0);\r\n                char = {...char,\r\n                            points: sum,\r\n                            hadTurn: true\r\n                        }\r\n                chars = subCharAtIndex([...chars], char);\r\n            })\r\n\r\n            const characters = [...createReplacementCharsArray(chars, action.payload.players)];\r\n\r\n            return{\r\n                ...state,\r\n                characters: characters\r\n            }\r\n        \r\n        case actionTypes.REMOVE_LOWEST_SCORE:\r\n        // dispatch({type: actionTypes.REMOVE_LOWEST_SCORE})\r\n\r\n        function reduceToLowestScore(accumulator, currentValue){\r\n            if(accumulator.points < currentValue.points){\r\n                return accumulator;\r\n            } else {\r\n                return currentValue;\r\n            }\r\n        }\r\n\r\n        const lowestScore = [...state.characters].filter(char => !char.isEliminated.check).reduce(reduceToLowestScore);\r\n\r\n        const lowestScoreCopy = {...lowestScore, isEliminated: {check: true, whenEliminated: \r\n                                                                    [...state.characters].filter(char => char.isEliminated.check).length}};\r\n\r\n        const charsCopy = subCharAtIndex([...state.characters], lowestScoreCopy);\r\n\r\n            return {\r\n                ...state,\r\n                characters: charsCopy\r\n            };\r\n\r\n        case actionTypes.RESET_FOR_FINALS:\r\n        //dispatch({type: actionTypes.RESET_FOR_FINALS})\r\n\r\n        const charsOfState = [...state.characters].map(char => {\r\n            const character = {...char,\r\n                roundRatings: {\r\n                    rowOne: {rowId: `${char.id}-row-1`, points: 1},\r\n                    rowTwo: {rowId: `${char.id}-row-2`, points: 1},\r\n                    rowThree: {rowId: `${char.id}-row-3`, points: 1},\r\n                    rowFour: {rowId: `${char.id}-row-4`, points: 1}\r\n                },\r\n                points: 0,\r\n                hadTurn: false\r\n            };\r\n            return character;\r\n        });\r\n\r\n        return{\r\n            ...state,\r\n            characters: charsOfState\r\n        }\r\n\r\n        case actionTypes.CHOOSE_WINNER:\r\n\r\n        const stateCharsCopy = [...state.characters];\r\n\r\n        const loser = {...stateCharsCopy.find(character => character.id === action.character.id)};\r\n\r\n        loser.isEliminated = {...loser.isEliminated, \r\n                                check: true, \r\n                                whenEliminated: [...state.characters].filter(char => char.isEliminated.check).length}\r\n\r\n        const newChars = subCharAtIndex([...state.characters], loser);\r\n\r\n            return {\r\n                ...state,\r\n                characters: newChars\r\n            };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { rootReducer } from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                        <App />\r\n                    </BrowserRouter>\r\n                </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}