// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When Character first renders Character renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Character
    character={
      Object {
        "hadTurn": false,
        "id": "foo$id1",
        "imageUrl": "foo$Image1",
        "isEliminated": Object {
          "check": false,
          "whenEliminated": null,
        },
        "points": 20,
        "roundRatings": Object {
          "rowFour": Object {
            "points": 5,
            "rowId": "foo$id1-row-4",
          },
          "rowOne": Object {
            "points": 5,
            "rowId": "foo$id1-row-1",
          },
          "rowThree": Object {
            "points": 5,
            "rowId": "foo$id1-row-3",
          },
          "rowTwo": Object {
            "points": 5,
            "rowId": "foo$id1-row-2",
          },
        },
      }
    }
    characters={
      Array [
        Object {
          "hadTurn": false,
          "id": "foo$id1",
          "imageUrl": "foo$Image1",
          "isEliminated": Object {
            "check": false,
            "whenEliminated": null,
          },
          "points": 20,
          "roundRatings": Object {
            "rowFour": Object {
              "points": 5,
              "rowId": "foo$id1-row-4",
            },
            "rowOne": Object {
              "points": 5,
              "rowId": "foo$id1-row-1",
            },
            "rowThree": Object {
              "points": 5,
              "rowId": "foo$id1-row-3",
            },
            "rowTwo": Object {
              "points": 5,
              "rowId": "foo$id1-row-2",
            },
          },
        },
        Object {
          "hadTurn": false,
          "id": "foo$id2",
          "imageUrl": "foo$Image2",
          "isEliminated": Object {
            "check": false,
            "whenEliminated": null,
          },
          "points": 20,
          "roundRatings": Object {
            "rowFour": Object {
              "points": 5,
              "rowId": "foo$id2-row-4",
            },
            "rowOne": Object {
              "points": 5,
              "rowId": "foo$id2-row-1",
            },
            "rowThree": Object {
              "points": 5,
              "rowId": "foo$id2-row-3",
            },
            "rowTwo": Object {
              "points": 5,
              "rowId": "foo$id2-row-2",
            },
          },
        },
      ]
    }
    finals={true}
    players={3}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt="One of the images chosen for competition"
          src="foo$Image1"
        />,
        <Link
          replace={false}
          to="/winner"
        >
          <submitButton>
            Winner!
          </submitButton>
        </Link>,
      ],
      "className": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "One of the images chosen for competition",
          "className": undefined,
          "src": "foo$Image1",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <submitButton>
            Winner!
          </submitButton>,
          "onClick": undefined,
          "replace": false,
          "to": "/winner",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Winner!",
          },
          "ref": null,
          "rendered": "Winner!",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="One of the images chosen for competition"
            src="foo$Image1"
          />,
          <Link
            replace={false}
            to="/winner"
          >
            <submitButton>
              Winner!
            </submitButton>
          </Link>,
        ],
        "className": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "One of the images chosen for competition",
            "className": undefined,
            "src": "foo$Image1",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <submitButton>
              Winner!
            </submitButton>,
            "onClick": undefined,
            "replace": false,
            "to": "/winner",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Winner!",
            },
            "ref": null,
            "rendered": "Winner!",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
