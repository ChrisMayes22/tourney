// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When unconnected component first renders VotingPage renders as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VotingPage
    characters={Array []}
    players={4}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        null,
        <votingLayout
          finals={false}
          players={4}
        >
          <prelimVotingContent
            characters={Array []}
            players={4}
          />
        </votingLayout>,
        <footer>
          <Link
            onClick={[Function]}
            replace={false}
            to="/upload"
          >
            <submitButton>
              Submit
            </submitButton>
          </Link>
        </footer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <prelimVotingContent
            characters={Array []}
            players={4}
          />,
          "finals": false,
          "players": 4,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "characters": Array [],
            "clicked": undefined,
            "players": 4,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            onClick={[Function]}
            replace={false}
            to="/upload"
          >
            <submitButton>
              Submit
            </submitButton>
          </Link>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <submitButton>
              Submit
            </submitButton>,
            "onClick": [Function],
            "replace": false,
            "to": "/upload",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "footer",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          null,
          <votingLayout
            finals={false}
            players={4}
          >
            <prelimVotingContent
              characters={Array []}
              players={4}
            />
          </votingLayout>,
          <footer>
            <Link
              onClick={[Function]}
              replace={false}
              to="/upload"
            >
              <submitButton>
                Submit
              </submitButton>
            </Link>
          </footer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <prelimVotingContent
              characters={Array []}
              players={4}
            />,
            "finals": false,
            "players": 4,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "characters": Array [],
              "clicked": undefined,
              "players": 4,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              onClick={[Function]}
              replace={false}
              to="/upload"
            >
              <submitButton>
                Submit
              </submitButton>
            </Link>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <submitButton>
                Submit
              </submitButton>,
              "onClick": [Function],
              "replace": false,
              "to": "/upload",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Submit",
              },
              "ref": null,
              "rendered": "Submit",
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "footer",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
